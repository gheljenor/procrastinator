{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/components/Button.svelte","../../src/components/Editable.svelte","../../src/components/Task.svelte","../../src/components/TaskList.svelte","../../node_modules/svelte/store/index.mjs","../../src/stores/task-list.ts","../../src/state.ts","../../src/components/LegalLink.svelte","../../src/App.svelte","../../src/service-worker-install.ts","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script lang=\"ts\">\n    export let title: string;\n    export let big: boolean = false;\n</script>\n\n<style lang=\"less\">\n    button {\n        cursor: pointer;\n        padding: 10px 5px;\n        margin: 0;\n        position: relative;\n\n        transition: all 0.1s ease;\n        background: #eee;\n        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n        border: 1px #ddd solid;\n        border-radius: 2px;\n\n        &:hover {\n            background: #f7f7f7;\n        }\n\n        &:focus, &:active {\n            border-color: #7ebee6;\n        }\n\n        &:active {\n            color: #304a59;\n            background: #fff;\n            box-shadow: 0 0 10px 1px rgba(#7ebee6, 0.5);\n            transform: scale(0.95, 0.9);\n        }\n    }\n\n    .big {\n        flex: 1 1 auto;\n    }\n</style>\n\n<button on:click class:big>\n    {title}\n</button>\n","<script lang=\"ts\">\n    import {createEventDispatcher} from \"svelte\";\n\n    export let text: string;\n\n    let self: HTMLInputElement;\n\n    const dispatch = createEventDispatcher();\n\n    function onKeyPress(event: KeyboardEvent) {\n        if (event.charCode === 13) {\n            dispatch(\"submit\");\n            self.blur();\n        }\n    }\n</script>\n\n<style lang=\"less\">\n    input {\n        flex: 1 1 auto;\n        margin: 0 10px 0 0;\n        padding: 6px 5px;\n        border: none;\n        outline: none;\n        background: none;\n        transition: all 0.3s ease;\n\n        &:focus {\n            background: #fff;\n            box-shadow: 0 0 5px rgba(#7ebee6, 0.5);\n        }\n    }\n</style>\n\n<input type=\"text\"\n        bind:value={text}\n        bind:this={self}\n        on:keypress={onKeyPress}\n        on:blur\n/>\n","<script lang=\"ts\">\n    import {createEventDispatcher} from \"svelte\";\n\n    import Button from \"./Button.svelte\";\n    import Editable from \"./Editable.svelte\";\n\n    const dispatch = createEventDispatcher();\n\n    const dispatchEvent = (event: string) => () => dispatch(event);\n\n    export let current: boolean;\n    export let title: string;\n</script>\n\n<style lang=\"less\">\n    * {\n        color: #333;\n    }\n\n    task-panel {\n        display: block;\n        width: 100%;\n        box-sizing: border-box;\n        position: relative;\n        padding: 0;\n        background: #fafafa;\n        border: 1px #e6e6e6 solid;\n        border-radius: 5px;\n        overflow: hidden;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        transition: all 2s ease;\n        margin-bottom: 5px;\n\n        &:hover {\n            background: #fff;\n            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);\n        }\n    }\n\n    task-line {\n        display: flex;\n        flex-flow: nowrap row;\n        align-items: baseline;\n        margin-bottom: 5px;\n\n        &:last-of-type {\n            margin-bottom: 0;\n        }\n    }\n\n    spacer {\n        width: 10px;\n    }\n</style>\n\n<task-panel>\n    <task-line>\n        {#if !current}\n            <Button title=\"Today\" on:click={dispatchEvent('moveLeft')} />\n            <spacer />\n        {/if}\n\n        <Editable bind:text={title} on:blur={() => dispatch('changed', title)} />\n\n        <Button title=\"Done\" on:click={dispatchEvent('close')} />\n    </task-line>\n\n    {#if current}\n        <task-line>\n            <Button title=\"Hurry\" big={true} on:click={dispatchEvent('moveUp')} />\n            <Button title=\"Wait\" big={true} on:click={dispatchEvent('moveDown')} />\n\n            <spacer />\n\n            <Button title=\"Now\" big={true} on:click={dispatchEvent('moveTop')} />\n            <Button title=\"Later\" big={true} on:click={dispatchEvent('moveBottom')} />\n\n            <spacer />\n\n            <Button title=\"Tomorrow\" big={true} on:click={dispatchEvent('moveRight')} />\n        </task-line>\n    {/if}\n</task-panel>\n","<script lang=\"ts\">\n    import type {TaskData} from \"../types\";\n    import type {TaskListStore} from \"../stores/task-list\";\n    import {createEventDispatcher} from \"svelte\";\n    import Task from \"./Task.svelte\";\n\n    const dispatch = createEventDispatcher();\n\n    export let current: boolean;\n    export let taskList: TaskListStore;\n\n    function moveLeft(task: TaskData) {\n        taskList.remove(task);\n        dispatch(\"left\", task);\n    }\n\n    function moveRight(task: TaskData) {\n        taskList.remove(task);\n        dispatch(\"right\", task);\n    }\n</script>\n\n<style lang=\"less\">\n    task-list {\n        display: block;\n        padding: 5px;\n\n        &:empty {\n            display: none;\n        }\n    }\n</style>\n\n<task-list>\n    {#each $taskList as task (task.id)}\n        <Task\n                {current}\n                title={task.title}\n                on:changed={event => taskList.updateTask(task, event.detail)}\n                on:close={() => taskList.remove(task)}\n                on:moveDown={() => taskList.moveDown(task)}\n                on:moveBottom={() => taskList.moveBottom(task)}\n                on:moveUp={() => taskList.moveUp(task)}\n                on:moveTop={() => taskList.moveTop(task)}\n                on:moveLeft={() => moveLeft(task)}\n                on:moveRight={() => moveRight(task)}\n        />\n    {/each}\n</task-list>\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from \"svelte/store\";\nexport function createTaskListStore(initialState) {\n    const store = writable(initialState);\n    const subscribe = store.subscribe.bind(store);\n    return {\n        subscribe,\n        moveUp(task) {\n            store.update(list => {\n                const idx = list.indexOf(task);\n                list.splice(idx, 1);\n                list.splice(idx - 1, 0, task);\n                return list;\n            });\n        },\n        moveDown(task) {\n            store.update(list => {\n                const idx = list.indexOf(task);\n                list.splice(idx, 1);\n                list.splice(idx + 1, 0, task);\n                return list;\n            });\n        },\n        moveTop(task) {\n            store.update(list => {\n                list.splice(list.indexOf(task), 1);\n                list.unshift(task);\n                return list;\n            });\n        },\n        moveBottom(task) {\n            store.update(list => {\n                list.splice(list.indexOf(task), 1);\n                list.push(task);\n                return list;\n            });\n        },\n        add(task) {\n            store.update(list => {\n                list.push(task);\n                return list;\n            });\n        },\n        remove(task) {\n            store.update(list => {\n                list.splice(list.indexOf(task), 1);\n                return list;\n            });\n        },\n        updateTask(task, text) {\n            store.update(list => {\n                task.title = text;\n                return list;\n            });\n        },\n        set(values) {\n            store.set(values);\n        },\n    };\n}\n","import { createTaskListStore } from \"./stores/task-list\";\nlet fromHistory = true;\nconst state = loadState();\nhistory.replaceState(state, document.title);\nexport const current = createTaskListStore(state.current);\nexport const next = createTaskListStore(state.next);\nexport function loadState() {\n    const state = localStorage.getItem(\"state\");\n    return state && JSON.parse(state) || { current: [], next: [] };\n}\nexport function storeState(state) {\n    localStorage.setItem(\"state\", JSON.stringify(state));\n    console.debug(\"saved\", \"state\", JSON.stringify(state));\n    if (fromHistory) {\n        fromHistory = false;\n    }\n    else {\n        history.pushState(state, document.title);\n    }\n}\nexport function onPopState(event) {\n    if (!event.state) {\n        return;\n    }\n    fromHistory = true;\n    current.set(event.state.current);\n    next.set(event.state.next);\n    console.debug(\"loaded\", JSON.stringify(event.state));\n}\n","<script lang=\"ts\">\n    export let href: string;\n    export let title: string;\n</script>\n\n<style>\n    a {\n        color: inherit;\n    }\n</style>\n\n<a rel=\"noreferrer\" target=\"_blank\" tabindex=\"-1\" {href} {title}>{title}</a>\n","<script lang=\"ts\">\n    import TaskList from \"./components/TaskList.svelte\";\n    import Editable from \"./components/Editable.svelte\";\n    import Button from \"./components/Button.svelte\";\n    import {current, next, storeState, onPopState} from \"./state\";\n    import LegalLink from \"./components/LegalLink.svelte\";\n\n    let newTask: string = \"\";\n\n    let counter: number = Math.max(0,\n        ...$current.map(({id}) => id),\n        ...$next.map(({id}) => id),\n    ) + 1;\n\n    $: if (!$current.length && $next.length) {\n        current.set($next);\n        next.set([]);\n    }\n    $: storeState({current: $current, next: $next});\n    $: console.debug(\"counter\", counter);\n\n    function createTask() {\n        current.add({id: counter++, title: newTask});\n        newTask = \"\";\n    }\n</script>\n\n<style lang=\"less\">\n    create {\n        display: flex;\n        flex-flow: nowrap row;\n        margin-bottom: 10px;\n    }\n\n    tasks {\n        display: flex;\n        flex-flow: wrap row;\n    }\n\n    column {\n        display: block;\n        flex: 2 1 400px;\n\n        &.next {\n            opacity: 0.5;\n            flex: 1 1 200px;\n        }\n    }\n\n    legal {\n        color: #999;\n    }\n</style>\n\n<svelte:window on:popstate={onPopState} />\n\n<main>\n    <create>\n        <Editable bind:text={newTask} on:submit={createTask} />\n        <Button title=\"Create\" on:click={createTask} />\n    </create>\n\n    <tasks>\n        <column>\n            <TaskList current={true} taskList={current} on:right={event => next.add(event.detail)} />\n        </column>\n\n        {#if $next.length}\n            <column class=\"next\">\n                <TaskList current={false} taskList={next} on:left={event => current.add(event.detail)} />\n            </column>\n        {/if}\n    </tasks>\n</main>\n\n<legal>Icons made by\n    <LegalLink href=\"https://www.flaticon.com/authors/dinosoftlabs\" title=\"DinosoftLabs\" />\n    from\n    <LegalLink href=\"https://www.flaticon.com/\" title=\"Flaticon\" />\n</legal>\n","export async function serviceWorkerInstall() {\n    if (!(\"serviceWorker\" in navigator)) {\n        throw new Error(\"No service worker support\");\n    }\n    const registration = await navigator.serviceWorker.register(\"service-worker.js\");\n    console.log(\"ServiceWorker registration successful with scope: \", registration.scope);\n    await registration.update();\n    console.log(\"updated\");\n}\n","import App from \"./App.svelte\";\nimport { serviceWorkerInstall } from \"./service-worker-install\";\nserviceWorkerInstall()\n    .catch(error => console.warn(\"Service worker failed:\", error));\nconst app = new App({\n    target: document.body,\n    props: {},\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","component_subscribe","component","callback","$$","on_destroy","push","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_custom_element_data","prop","set_data","wholeText","set_input_value","input","toggle_class","toggle","classList","current_component","set_current_component","createEventDispatcher","Error","get_current_component","type","detail","e","createEvent","initCustomEvent","custom_event","slice","call","bubble","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","flushing","seen_callbacks","Set","flush","i","length","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","outro_and_destroy_block","lookup","key","bind","index","props","undefined","bound","create_component","mount_component","on_mount","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","parent_component","prop_values","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","indexOf","splice","$$props","obj","$$set","keys","title","big","self","dispatch","charCode","blur","current","id","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","deltas","child_ctx","get","set","Math","abs","will_move","did_move","first","new_block","old_block","new_key","old_key","taskList","moveLeft","task","remove","moveRight","updateTask","moveDown","moveBottom","moveUp","moveTop","subscriber_queue","createTaskListStore","initialState","start","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","writable","idx","unshift","values","fromHistory","state","localStorage","getItem","JSON","parse","loadState","history","replaceState","onPopState","console","debug","stringify","href","newTask","counter","max","$current","$next","setItem","pushState","storeState","async","navigator","registration","serviceWorker","register","log","scope","serviceWorkerInstall","catch","error","warn","body"],"mappings":"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"}